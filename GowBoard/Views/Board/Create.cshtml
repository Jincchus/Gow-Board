@{
    ViewBag.Title = "Board Create Page";
    string category = ViewBag.Category;
    var boardFileId = ViewBag.BoardFileId;
}


<main id="main">
    <section id="contact" class="contact mb-5">

        <div class="container" data-aos="fade-up">

            <div class="row">
                <div class="col-lg-12 text-center mb-5">
                    <h1 class="site-title">Gow Board</h1>
                    <br>
                    <h3>자유 게시판</h3>
                </div>
            </div>

            <!-- start table -->
            <div class="form mt-5 php-email-form">

                <div class="form-group">
                    <input type="text" class="form-control" name="Title" id="Title" placeholder="Title" required>
                    <input type="hidden" class="form-control" name="Category" id="Category" value="@category" required>

                </div>

                <form id="editorForm" class="editor" name="Content" method="post" enctype="multipart/form-data">
                    <div id="editor"></div>
                </form>

                <div class="text-md-end mt-5">
                    <button type="submit" id="" class="text-md-end cancel-btn">취소</button>
                    <button type="button" id="create-board-ajax-btn" class="text-md-end ajax-btn">글등록</button>
                </div>
            </div><!-- End table -->

            <br>




        </div>


    </section>

</main><!-- End #main -->

<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/froala-editor@latest/js/froala_editor.pkgd.min.js'></script>

<script>


    const cancelBtn = document.querySelector(".cancel-btn");
    const category = document.querySelector("#Category").value;
    var boardFileId = [];

    cancelBtn.addEventListener("click", function () {
        if (confirm("입력된 글이 모두 사라집니다. 리스트로 돌아가시겠습니까?")) {
            window.location.href = "/Board/List?category=" + category;
        }
    });

    var editor = new FroalaEditor('#editor', {
        toolbarButtons: {
            'moreText': {
                'buttons': ['bold', 'italic', 'underline', 'strikeThrough', 'subscript', 'superscript', 'fontFamily', 'fontSize', 'textColor', 'backgroundColor', 'inlineClass', 'inlineStyle', 'clearFormatting']
            },
            'moreParagraph': {
                'buttons': ['alignLeft', 'alignCenter', 'formatOLSimple', 'alignRight', 'alignJustify', 'formatOL', 'formatUL', 'paragraphFormat', 'paragraphStyle', 'lineHeight', 'outdent', 'indent', 'quote']
            },
            'moreRich': {
                'buttons': ['emoticons', 'insertImage', 'insertTable', 'insertVideo', 'insertLink', 'fontAwesome', 'specialCharacters', 'embedly', 'insertFile', 'insertHR']
            },
            'moreMisc': {
                'buttons': ['undo', 'redo', 'fullscreen', 'print', 'getPDF', 'spellChecker', 'selectAll', 'html', 'help']
            }
        },
        heightMin: 500,
        heightMax: 500,
        imageUploadURL: '/Board/BoardFileCreate',
        imageUploadMethod: 'POST',
        fileUploadURL: '/Board/BoardFileCreate',
        fileUploadMethod: 'POST',
        htmlAllowedTags: ['.*'],
        htmlAllowedAttrs: ['.*'],
        htmlRemoveTags: ['script'],
        pastePlain: false,
        htmlExecuteScripts: false,
        entities: '',
        htmlDoNotWrapTags: ['br', 'hr'],
        htmlUntouched: true,
        useClasses: false,
        events: {
            'contentChanged': function () {
                var html = this.html.get(true);
            },
            'image.uploaded': function (response) {
                var resObj = JSON.parse(response);
                boardFileId.push(resObj.boardFileId);
            },
            'image.removed': async function ($img) {
                var boardFileId = $img.attr('boardfileid');

                try {
                    const response = await fetch('/Board/RemoveFile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ boardFileId: boardFileId })
                    });

                    const data = await response.json();

                    if (!data.success) {
                        throw new Error(data.message || '이미지 삭제 중 오류가 발생했습니다.');
                    }
                    console.log("이미지 삭제 완료");
                }catch(error) {
                        console.error(error);
                    alert(`이미지 삭제 중 오류가 발생했습니다.${error.message}`);
                };
            },
            'image.error': function (error) {
                console.error(error);
                alert("이미지 업로드 중 오류가 발생했습니다. 다시 시도해주세요.");
            },
            'file.uploaded': function (response) {
                var resObj = JSON.parse(response);
                boardFileId.push(resObj.boardFileId);
                var buttonHtml = `
                <div class="uploaded-file-container" data-boardfileid="${resObj.boardFileId}">
                    <button type="button" class="uploaded-file">${resObj.fileName}</button>
                    <button type="button" class="delete-file">X</button>
                </div>`;
                editor.html.insert(buttonHtml);
            },
            'file.unlink': async function (link) {
                var boardFileId = extractBoardFileIdFromUrl(link);
                debugger
                try {
                    const response = await fetch('/Board/RemoveFile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ boardFileId: boardFileId })
                    });

                    const data = await response.json();

                    if (!data.success) {
                        throw new Error(data.message || '파일 삭제 중 오류가 발생했습니다.');
                    }

                    var button = editor.el.querySelector(`button[data-boardfileid="${boardFileId}"]`);
                    if (button) {
                        button.remove();
                    }

                    console.log("파일 삭제 완료");

                } catch(error) {
                        console.error(error);
                        alert("파일 삭제 중 오류가 발생했습니다. 다시 시도해주세요.");
                }
            },
        }
    });

    // file link의 boardFileId 가공 함수
    function extractBoardFileIdFromUrl(link) {
        try {
            var url = new URL(link);
            var searchParams = new URLSearchParams(url.search);
            var boardFileId = searchParams.get('BoardFileId');
            return boardFileId;
        } catch (error) {
            console.error("URL에서 boardFileId 추출 중 오류 발생:", error);
            return null;
        }
    }

    document.addEventListener('click', async function (event) {
        if (event.target.classList.contains('delete-file')) {
            event.preventDefault();

            var buttonContainer = event.target.closest('.uploaded-file-container');
            var boardFileId = buttonContainer.getAttribute('data-boardfileid');

            try {
                const response = await fetch('/Board/RemoveFile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ boardFileId: boardFileId })
                });

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || '파일 삭제 중 오류가 발생했습니다.');
                }

                if (buttonContainer) {
                    buttonContainer.remove();
                }

                console.log("파일 삭제 완료");
            } catch (error) {
                console.error(error);
                alert("파일 삭제 중 오류가 발생했습니다. 다시 시도해주세요.");
            }
        }
    });

    const createBoardBtn = document.querySelector("#create-board-ajax-btn");
    createBoardBtn.addEventListener("click", function () {
        if (!confirm("게시글을 등록하시겠습니까?")) {
            return;
        }

        const title = document.querySelector("#Title");
        const content = editor.el.innerHTML;
        const contentText = editor.html.get().replace(/<p><br><\/p>/g, '').trim();

        if (title.value.trim() === "") {
            alert("제목을 입력해주세요");

            title.focus()
            return;
        }

        if (contentText == "") {
            alert("내용을 입력해주세요");

            editor.events.focus()
            return;

        }
        let formData = new FormData();
        formData.append('Title', document.querySelector("#Title").value);
        formData.append('Category', category);
        formData.append('Content', content);

        for (let i = 0; i < boardFileId.length; i++) {
            formData.append('BoardFileId[]', boardFileId[i]);
        }

        fetch('/Board/Create', {
            method: "POST",
            body: formData
        })
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    alert(data.message);
                    window.location.href = "/Board/DetailView/" + data.boardContentId;
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                alert('전송 오류 : ' + error.message)
            })
    });

</script>
